import 'dart:async';

import 'package:bintango_indonesian_translater/feature/home/repository/translate_repository.dart';
import 'package:bintango_indonesian_translater/feature/home/state/translate_state.dart';
import 'package:bintango_indonesian_translater/shared/util/analytics/analytics_parameters.dart';
import 'package:bintango_indonesian_translater/shared/util/analytics/firebase_analytics.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'translate_provider.g.dart';

//Generated by @riverpod
// final homeNotifierProvider =
//     NotifierProvider<HomeNotifier, HomeState>(HomeNotifier.new);

@riverpod
class TranslateNotifier extends _$TranslateNotifier {
  @override
  TranslateState build() {
    return TranslateState();
  }

  late final _translateProvider = ref.read(translateRepositoryProvider);

  void changeLangSource() {
    state.isLanguageSourceJapanese = !state.isLanguageSourceJapanese;
    if (state.translateResponse != null && state.translateResponse!.text.isNotEmpty) {
      state
          ..inputtedText = state.translateResponse!.text
          ..translateResponse = null;
    }
    state = state.copyWith();
  }

  Future<void> updateInputText(String text) async {
    state.inputtedText = text;
    state = state.copyWith();

    await Future.delayed(const Duration(seconds: 2));
    if (state.inputtedText == text && state.inputtedText.length >= 3) {
      FirebaseAnalyticsUtils.eventsTrack(HomeItem.search);
      await translate();
      unawaited(searchIncludedWords());
    }
    await Future.delayed(const Duration(seconds: 2));
    if (state.inputtedText == text && state.inputtedText.length >= 3) {
      await getDetailExplanation();
    }
  }

  Future<void> translate() async {
    state.isLoading = true;
    state = state.copyWith();
    final response = await _translateProvider.translate(
        text: state.inputtedText,
        isSourceJapanese: state.isLanguageSourceJapanese,);
    state
      ..translateResponse = response
      ..isLoading = false;
    state = state.copyWith();
  }

  Future<void> getDetailExplanation() async {
    state.isLoadingGrammarExplanation = true;
    state = state.copyWith();
    if (state.translateResponse != null && state.translateResponse!.text.isNotEmpty) {
      final response = await _translateProvider.getDetailExplanation(
          text: state.isLanguageSourceJapanese
              ? state.translateResponse!.text : state.inputtedText,
          isSourceJapanese: state.isLanguageSourceJapanese,);
      state
        ..getDetailExplanationResponse = response
        ..isLoadingGrammarExplanation = false;
      state = state.copyWith();
    }
  }

  Future<void> searchIncludedWords() async {
    state.isLoadingWordList = true;
    state = state.copyWith();
    final includedWordList =
      await _translateProvider.searchIncludeWords(
          state.isLanguageSourceJapanese
              ? state.translateResponse?.text ?? '' : state.inputtedText,);
    state
      ..includedWords = includedWordList
      ..isLoadingWordList = false;
    state = state.copyWith();
  }
}
